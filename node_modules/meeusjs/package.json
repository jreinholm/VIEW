{
  "name": "meeusjs",
  "version": "1.0.3",
  "description": "Implementation of the Astronomical Algorithms of Jean Meeus in Javascript ",
  "dependencies": {
    "moment": "^2.18.1"
  },
  "devDependencies": {
    "closurecompiler": "~1",
    "eslint": "^1.10.3",
    "jsdoc": "^3.4.0"
  },
  "eslintConfig": {
    "rules": {
      "indent": 0,
      "array-bracket-spacing": 0,
      "strict": 0,
      "brace-style": 0
    }
  },
  "scripts": {
    "lint": "eslint lib/*.js",
    "pretest": "npm run lint",
    "test": "echo \"Error: no test specified\" && exit 1",
    "jsdoc": "jsdoc lib/ package.json"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/timelapseplus/MeeusJs.git"
  },
  "keywords": [
    "meeus",
    "solar",
    "lunar",
    "eclipse",
    "astronomy",
    "astronomical",
    "algorithms",
    "javascript",
    "julianday",
    "sunrise",
    "sunset",
    "moon"
  ],
  "author": {
    "name": "Fabio Soldati",
    "url": "http://www.peakfinder.org"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Fabiz/Meeus/issues"
  },
  "homepage": "https://github.com/Fabiz/Meeus#readme",
  "readme": "# MeeusJs\n\nMeeusJs is an implementation of some algorithms of the Book 'Astronomical Algorithms of Jean Meeus' in Javascript.\nIt follows the second edition, copyright 1998, with corrections as of August 10, 2009.\n \nThe library can be used to calculate sun and moon positions and their phases (rise, transmit, set) on a high accuracy.\n\nThe library is about 20kb (minimized) and licensed under MIT. It includes various unit tests against the data of http://ssd.jpl.nasa.gov/horizons.cgi.\n\nThe sourcecode is written by [Fabio Soldati](http://www.peakfinder.org/about) ([@fabiz](https://github.com/fabiz)) from http://www.peakfinder.org.\n\n\n## Package contents\n\nCurrently the following chapters are implemented:\n\n| Chapter                                              | Module        |\n| ---------------------------------------------------- |:-------------:| \n|3.  Interpolation                                     | A.Interp      |\n|7.  Julian Day                                        | A.JulianDay   |\n|10. Dynamical Time and Universal Time                 | A.DeltaT      |\n|11. The Earth's Globe                                 | A.Globe       |\n|12. Sidereal Time at Greenwich                        | A.Sidereal    |\n|13. Transformation of Coordinates                     | A.Coord       |\n|14. The Parallactic Angle, and three other Topics     | A.Moon        |\n|15. Rising, Transit, and Setting                      | A.Rise        |\n|16. Atmospheric Refraction                            | A.Refraction  |\n|22. Nutation and the Obliquity of the Ecliptic        | A.Nutation    |\n|23. Apparent Place of a Star                          | A.Nutation    |\n|25. Solar Coordinates                                 | A.Solar       |\n|27. Equinoxes and Solstices                           | A.Solstice    |\n|40. Correction for Parallax                           | A.Parallax    |\n|47. Position of the Moon                              | A.Moon        |\n|48. Illuminated Fraction of the Moon's Disk           | A.MoonIllum   |\n|49. Phases of the Moon                                | A.MoonPhase   |\n\n\n## Usage example\n\n### Sun\n\n```javascript\n\n// gets sun position and times for zurich\nvar jdo = new A.JulianDay(new Date()); // now\nvar coord = A.EclCoord.fromWgs84(47.3957, 8.4867, 440); // zurich\n\n// gets the position of the sun\t\t\nvar tp = A.Solar.topocentricPosition(jdo, coord, true);\n// print azi and alt\nconsole.log(tp.hz.toString()); \n\n// gets the rise, transit and set time of the sun for today\nvar times = A.Solar.times(jdo, coord);\n\t\n// print rise, transit and set in universal time\t\nconsole.log(\"rise:\" + A.Coord.secondsToHMSStr(times.rise) + \n          \", transit:\" + A.Coord.secondsToHMSStr(times.transit) + \n          \", set:\" +  A.Coord.secondsToHMSStr(times.set));\n```\n\n\n### Moon\n\n```javascript\n\n// gets the moon position and times for zurich\nvar jdo = new A.JulianDay(new Date()); // now\nvar coord = A.EclCoord.fromWgs84(47.3957, 8.4867, 440); // zurich\n\n// gets the position of the moon\t\t\nvar tp = A.Moon.topocentricPosition(jdo, coord, true);\n// print azi and alt\nconsole.log(tp.hz.toString() + \", dist:\" + tp.delta); \n\n// gets the rise, transit and set time of the moon for today\nvar times = A.Moon.times(jdo, coord);\n\t\n// print rise, transit and set in universal time\t\nconsole.log(\"rise:\" + A.Coord.secondsToHMSStr(times.rise) + \n          \", transit:\" + A.Coord.secondsToHMSStr(times.transit) + \n          \", set:\" +  A.Coord.secondsToHMSStr(times.set));\n\t\t  \n\n// print moon phase and illuminated\nvar suneq = A.Solar.apparentTopocentric(jdo, coord);\nvar i = A.MoonIllum.phaseAngleEq2(tp.eq, suneq);\nvar k = A.MoonIllum.illuminated(i);\nvar chi =  A.MoonIllum.positionAngle(moontp.eq, suneq);\n\nconsole.log(\"phase:\" + i + \", illuminated:\" + k + \", angle:\" + chi);\t\t\n```\n\n\n\n## Changelog\n\n#### 1.0.3 &mdash; Jan 18, 2017\n\n- Fixed bug on A.JulianDay.jdToDate\n\n\n#### 1.0.2 &mdash; Mar 18, 2016\n\n- Added solistice\n\n#### 1.0.1 &mdash; Mar 04, 2016\n\n- Fixed bug of MoonIllum\n- Added approxTransit to Moon and Solar\n- Added toDate method the JulianDay\n\n\n#### 1.0.0 &mdash; Mar 02, 2016\n\n- First commit.\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "meeusjs@1.0.3",
  "_shasum": "3295c863501033a787c8219be3d39eb6d74f8e9e",
  "_resolved": "git://github.com/timelapseplus/MeeusJs#3c2f0f73e0500f7d262c602e41d59a223fb74b73",
  "_from": "git://github.com/timelapseplus/MeeusJs",
  "_fromGithub": true
}
