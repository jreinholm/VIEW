{
  "author": {
    "name": "Elijah Parker"
  },
  "name": "sony-camera",
  "description": "Wifi control for Sony Alpha cameras",
  "homepage": "https://github.com/timelapseplus/node-sony-camera",
  "version": "0.0.6",
  "main": "./index.js",
  "dependencies": {
    "semver": "^5.3.0",
    "util": "^0.10.3"
  },
  "devDependencies": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "keywords": [
    "photography",
    "sony",
    "sony alpha",
    "sony a7",
    "sony a7s",
    "sony a7r",
    "camera"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/timelapseplus/node-sony-camera.git"
  },
  "readme": "# SonyCamera\n\nOriginally forked from https://github.com/eqot/RemoteCamera\n\nRebuilt as a library with event support.\n\n\n## Installation\n\n```\nnpm install sony-camera\n```\nOr, for development and using the demo app:\n```\ngit clone https://github.com/timelapseplus/node-sony-camera.git\ncd node-sony-camera\nnpm install\n```\n\n# Usage\n\n```\nvar SonyCamera = require('sony-camera');\n\nvar cam = new SonyCamera();\n\ncam.on('update', function(param, data) {\n\tconsole.log(\"updated: \" + param  + \" = \" + data.current);\n});\n\ncam.connect(); // puts the camera in remote mode and starts monitoring events\n```\n\n## Properties\n\n### cam.params\n\nContains a list of parameters available.  Example:\n  ```\n  cam.params: \n   { cameraFunction: { current: 'Remote Shooting', available: [Object] },\n     postviewImageSize: { current: '2M', available: [Object] },\n     shootMode: { current: 'still', available: [Object] },\n     exposureMode: { current: 'Manual', available: [] },\n     flashMode: { current: 'on', available: [] },\n     focusMode: { current: 'MF', available: [Object] },\n     isoSpeedRate: { current: '1250', available: [Object] },\n     shutterSpeed: { current: '1/60', available: [Object] },\n     fNumber: { current: '5.6', available: [Object] }\n   }\n ```\n\n## Methods\n\n### cam.connect(callback)\n\nPuts the camera in remote control mode and starts monitoring events.  Required before calling any other methods.\n\n### cam.disconnect(callback)\n\nDisables remote control mode and stops monitoring events.  After disconnecting, cam.connect() will have to be called before any other methods.\n\n### cam.set(param, value, callback)\n\nSets a parameter. Check the cam.params property to find available options.  The (optional) callback has an error argument.\n```\n// example\ncam.set('fNumber', '5.6');\n```\n### cam.capture([multipleCallback,] callback)\n\nTakes a picture. If set, optional multipleCallback boolean argument, causes the callback to be called twice -- once when the capture is complete (includes image name), and again when the image is downloaded.  If there is an error, the callback is not called again. \n```\n// example\ncam.capture(true, function(err, name, imageData) {\n\tif(err) {\n\t\tconsole.log(\"error: \", err);\n\t}\n\tif(image) {\n\t\tconsole.log(\"received image buffer for \" + name + \" with a length of \" + imageData.length + \"bytes\");\n\t} else if(name) {\n\t\tconsole.log(\"capture complete: \" + name);\n\t}\n});\n```\n\n### cam.startViewfinder(callback)\nStarts streaming liveview, firing the \"liveviewJpeg\" event repeatedly for each liveview frame until cam.stopViewfinder() is called.\n\n### cam.stopViewfinder(callback)\nStops streaming liveview, disabling the \"liveviewJpeg\" event.\n\n## Events\n\n### cam.on('update', function(param, data))\n\nFired whenever a parameter on the camera changes. The data object has two properties: data.current (the current value), and data.available, an array of possible options.\n\n### cam.on('liveviewJpeg', function(jpegBuffer))\n\nFired repeatedly when liveview is enabled.  Returns a buffer with the jpeg data for the current frame.\n\n# Demo\n\n![alt text](https://github.com/timelapseplus/node-sony-camera/blob/master/demo/screenshot.png \"demo screenshot\")\n\nThe included demo is a lightweight app to show the basic features, allowing interaction with the camera in realtime with liveview and live-updating parameters.\n\n### 1. Setup:\n```\ncd node-sony-camera/demo\nnpm install\n```\n### 2. Connect computer wifi to camera \nOn the camera, go to Menu->Appication->Smart Remote Control to enable remote wifi mode, then connect the computer to the wifi network shown on the camera screen.\n\n### 3. Start demo app\n```\nnode ./server.js\n```\n\n### 4. Open http://localhost:3000/\n\n\n\n## License\n\nCopyright &copy; 2013-2014 Ikuo Terado, 2017 Elijah Parker. Released under the [MIT license](http://www.opensource.org/licenses/mit-license.php).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/timelapseplus/node-sony-camera/issues"
  },
  "_id": "sony-camera@0.0.6",
  "_shasum": "7d06ea3ed4a0dcf8242a374ea2158b066a5385ab",
  "_resolved": "git://github.com/timelapseplus/node-sony-camera#3b5eb65ee0588210e3acdc32fb714906c2b6fdc2",
  "_from": "git://github.com/timelapseplus/node-sony-camera",
  "_fromGithub": true
}
